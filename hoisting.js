/* let 과 const 는 호이스팅이 일어나는가? */

let foo = 1;

{
    console.log(foo);
    let foo = 2;
}

/* let 키워드로 선언한 변수의 경우 변수 호이스팅이 발생하지 않는다면 위 예제는 전역 변수 foo의 값을
출력 해야 한다. 하지만 let 키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에 참조 에러가 발생한다. 
즉 호이스팅이 발생하지 않는 것 처럼 동작한다.
*/

/* 재할당 금지 
const boo = 1;
boo = 2;
*/

let preTaxPrice = 100;
/* 0.1 이 명확하지 않아 가독성이 떨어진다. */
let afterTaxPrice = preTaxPrice + preTaxPrice * 0.1;

/*

const TAX_RATE = 0.1;

let preTaxPrice = 100;

let afterTaxPrice = preTaxPrice + (preTaxPrice * TAX_RATE)
*/

/* const 키워드로 선언된 변수는 원시 값을 할당한 경우 값을 변경할 수 없다. 
하지만 const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있다. 
객체 안의 프로퍼티는 보호받지 못하기때문에 변경이 가능하다.
즉 const 는 재할당을 금지할 뿐 불변을 의미하지 않는다.
재할당은 불가능하지만 프로퍼티 동적 생성, 삭제 프로퍼티 값의 변경을 통해 객체를 별견하응 것이 가능하다.
이 때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않는다.
*/

/* 
    es6 이후 문법에서는 var 키워드를 사용하지 않는다. 
    재할당이 필요한 경우에는 let 키워드를 사용(스코프는 최대한 좁게)
    변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용 한다.
    const키워드는 재할당을 금지하기때문에 var, let보다 안전하다.
*/
